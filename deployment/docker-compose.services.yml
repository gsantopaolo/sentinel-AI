networks:
  sentinel-frontend-network:
    external: true
    name: sentinel-frontend-network
  sentinel-backend-network:
    external: true
    name: sentinel-backend-network

services:
  api:
    build:
      context: ../
      dockerfile: src/api/Dockerfile
    container_name: sentinel-api
    env_file:
      - ../config/api.env
    environment:
      LOG_LEVEL: ${LOG_LEVEL}
      LOG_FORMAT: ${LOG_FORMAT}
      NATS_URL: ${NATS_URL}
      NATS_RECONNECT_TIME_WAIT: ${NATS_RECONNECT_TIME_WAIT}
      NATS_CONNECT_TIMEOUT: ${NATS_CONNECT_TIMEOUT}
      NATS_MAX_RECONNECT_ATTEMPTS: ${NATS_MAX_RECONNECT_ATTEMPTS}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      API_READINESS_TIME_OUT: ${API_READINESS_TIME_OUT}
    restart: unless-stopped
    ports:
      - "8000:8000"
    networks:
      - sentinel-backend-network
      - sentinel-frontend-network
#      - sentinel-frontend-network # For Traefik exposure
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: "curl --silent --fail http://localhost:8080/healthz > /dev/null || exit 1"
      interval: 20s
      start_period: 10s
      timeout: 3s
      retries: 3

  connector:
    build:
      context: ../
      dockerfile: src/connector/Dockerfile
    container_name: sentinel-connector
    environment:
      LOG_LEVEL: ${LOG_LEVEL}
      LOG_FORMAT: ${LOG_FORMAT}
      NATS_URL: ${NATS_URL}
      NATS_RECONNECT_TIME_WAIT: ${NATS_RECONNECT_TIME_WAIT}
      NATS_CONNECT_TIMEOUT: ${NATS_CONNECT_TIMEOUT}
      NATS_MAX_RECONNECT_ATTEMPTS: ${NATS_MAX_RECONNECT_ATTEMPTS}
      CONNECTOR_READINESS_TIME_OUT: ${CONNECTOR_READINESS_TIME_OUT}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    restart: unless-stopped
    networks:
      - sentinel-backend-network
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: "curl --silent --fail http://localhost:8080/healthz > /dev/null || exit 1"
      interval: 60s
      start_period: 10s
      timeout: 3s
      retries: 3

  filter:
    build:
      context: ../
      dockerfile: src/filter/Dockerfile
    container_name: sentinel-filter
    volumes:
      - ../src/filter/filter_config.yaml:/app/filter_config.yaml
    environment:
      LOG_LEVEL: ${LOG_LEVEL}
      LOG_FORMAT: ${LOG_FORMAT}
      NATS_URL: ${NATS_URL}
      NATS_RECONNECT_TIME_WAIT: ${NATS_RECONNECT_TIME_WAIT}
      NATS_CONNECT_TIMEOUT: ${NATS_CONNECT_TIMEOUT}
      NATS_MAX_RECONNECT_ATTEMPTS: ${NATS_MAX_RECONNECT_ATTEMPTS}
      QDRANT_HOST: ${QDRANT_HOST}
      QDRANT_PORT: ${QDRANT_PORT}
      QDRANT_COLLECTION_NAME: ${QDRANT_COLLECTION_NAME}
      EMBEDDING_MODEL_NAME: ${EMBEDDING_MODEL_NAME}
      FILTER_READINESS_TIME_OUT: ${FILTER_READINESS_TIME_OUT}
      LLM_PROVIDER: ${LLM_PROVIDER}
      LLM_MODEL_NAME: ${LLM_MODEL_NAME}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    restart: unless-stopped
    networks:
      - sentinel-backend-network
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: "curl --silent --fail http://localhost:8080/healthz > /dev/null || exit 1"
      interval: 60s
      start_period: 10s
      timeout: 3s
      retries: 3

  ranker:
    build:
      context: ../
      dockerfile: src/ranker/Dockerfile
    container_name: sentinel-ranker
    volumes:
      - ../src/ranker/ranker_config.yaml:/app/src/ranker/ranker_config.yaml
    environment:
      LOG_LEVEL: ${LOG_LEVEL}
      LOG_FORMAT: ${LOG_FORMAT}
      NATS_URL: ${NATS_URL}
      NATS_RECONNECT_TIME_WAIT: ${NATS_RECONNECT_TIME_WAIT}
      NATS_CONNECT_TIMEOUT: ${NATS_CONNECT_TIMEOUT}
      NATS_MAX_RECONNECT_ATTEMPTS: ${NATS_MAX_RECONNECT_ATTEMPTS}
      QDRANT_HOST: ${QDRANT_HOST}
      QDRANT_PORT: ${QDRANT_PORT}
      QDRANT_COLLECTION_NAME: ${QDRANT_COLLECTION_NAME}
      EMBEDDING_MODEL_NAME: ${EMBEDDING_MODEL_NAME}
      RANKER_READINESS_TIME_OUT: ${RANKER_READINESS_TIME_OUT}
    restart: unless-stopped
    networks:
      - sentinel-backend-network
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: "curl --silent --fail http://localhost:8080/healthz > /dev/null || exit 1"
      interval: 60s
      start_period: 10s
      timeout: 3s
      retries: 3

  inspector:
    build:
      context: ../
      dockerfile: src/inspector/Dockerfile
    container_name: sentinel-inspector
    volumes:
      - ../src/inspector/inspector_config.yaml:/app/src/inspector/inspector_config.yaml
    environment:
      NATS_URL: ${NATS_URL}
      NATS_RECONNECT_TIME_WAIT: ${NATS_RECONNECT_TIME_WAIT}
      NATS_CONNECT_TIMEOUT: ${NATS_CONNECT_TIMEOUT}
      NATS_MAX_RECONNECT_ATTEMPTS: ${NATS_MAX_RECONNECT_ATTEMPTS}
      QDRANT_HOST: ${QDRANT_HOST}
      QDRANT_PORT: ${QDRANT_PORT}
      QDRANT_COLLECTION_NAME: ${QDRANT_COLLECTION_NAME}
      EMBEDDING_MODEL_NAME: ${EMBEDDING_MODEL_NAME}
      LOG_LEVEL: ${LOG_LEVEL}
      LOG_FORMAT: ${LOG_FORMAT}
      INSPECTOR_READINESS_TIME_OUT: ${INSPECTOR_READINESS_TIME_OUT}
      LLM_PROVIDER: ${LLM_PROVIDER}
      LLM_MODEL_NAME: ${LLM_MODEL_NAME}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    restart: unless-stopped
    networks:
      - sentinel-backend-network
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
      qdrant:
        condition: service_healthy

  scheduler:
    build:
      context: ../
      dockerfile: src/scheduler/Dockerfile
    container_name: sentinel-scheduler
    environment:
      LOG_LEVEL: ${LOG_LEVEL}
      LOG_FORMAT: ${LOG_FORMAT}
      NATS_URL: ${NATS_URL}
      NATS_RECONNECT_TIME_WAIT: ${NATS_RECONNECT_TIME_WAIT}
      NATS_CONNECT_TIMEOUT: ${NATS_CONNECT_TIMEOUT}
      NATS_MAX_RECONNECT_ATTEMPTS: ${NATS_MAX_RECONNECT_ATTEMPTS}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      SCHEDULER_READINESS_TIME_OUT: ${SCHEDULER_READINESS_TIME_OUT}
      SCHEDULER_DEFAULT_POLL_INTERVAL: ${NATS_CONNECT_TIMEOUT}
    restart: unless-stopped
    networks:
      - sentinel-backend-network
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
    healthcheck:
      test: "curl --silent --fail http://localhost:8080/healthz > /dev/null || exit 1"
      interval: 60s
      start_period: 10s
      timeout: 3s
      retries: 3

  guardian:
    build:
      context: ../
      dockerfile: src/guardian/Dockerfile
    container_name: sentinel-guardian
    environment:
      LOG_LEVEL: ${LOG_LEVEL}
      LOG_FORMAT: ${LOG_FORMAT}
      GUARDIAN_READINESS_TIME_OUT: ${GUARDIAN_READINESS_TIME_OUT}
      NATS_URL: ${NATS_URL}
      NATS_RECONNECT_TIME_WAIT: ${NATS_RECONNECT_TIME_WAIT}
      NATS_CONNECT_TIMEOUT: ${NATS_CONNECT_TIMEOUT}
      NATS_MAX_RECONNECT_ATTEMPTS: ${NATS_MAX_RECONNECT_ATTEMPTS}
      ALERTS: ${ALERTS}
    restart: unless-stopped
    networks:
      - sentinel-backend-network
    depends_on:
      nats:
        condition: service_healthy
    healthcheck:
      test: "curl --silent --fail http://localhost:8080/healthz > /dev/null || exit 1"
      interval: 60s
      start_period: 10s
      timeout: 3s
      retries: 3

  web:
    build:
      context: ../
      dockerfile: src/web/Dockerfile
    container_name: sentinel-web
    environment:
      LOG_LEVEL: ${LOG_LEVEL}
      LOG_FORMAT: ${LOG_FORMAT}
      WEB_READINESS_TIME_OUT: ${WEB_READINESS_TIME_OUT}
      STREAMLIT_SERVER_ADDRESS: "0.0.0.0"
      STREAMLIT_SERVER_PORT: "8501"
      API_BASE_URL: ${API_BASE_URL}
    restart: unless-stopped
    ports:
      - "8501:8501"
    networks:
      - sentinel-frontend-network # For Traefik exposure
      - sentinel-backend-network # To communicate with API\
    command: >
      bash -c "streamlit run src/web/app.py \
        --server.address $STREAMLIT_SERVER_ADDRESS \
        --server.port    $STREAMLIT_SERVER_PORT"
    depends_on:
      api:
        condition: service_healthy

  nats:
    image: sentinel-nats:latest
    user: "0"
    build:
      context: .
      dockerfile: DockerfileNATS
    container_name: sentinel-nats
    ports:
      - "4222:4222"
      - "8222:8222"   # Monitoring / health endpoint
    volumes:
      - ./${DATA_PATH}/nats:/data/nats
    restart: unless-stopped
    networks:
      - sentinel-backend-network
    healthcheck:
      test: [ "CMD", "curl", "-sSf", "http://127.0.0.1:8222/varz" ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 20s

  nats-dashboard:
    image: mdawar/nats-dashboard
    container_name: nats-dashboard
    restart: unless-stopped
    environment:
      # The NATS monitoring server will be proxied on /proxy/* on the frontend.
      # See: config/Caddyfile for the reverse proxy configuration.
      REVERSE_PROXY_UPSTREAM: 'nats:8222'
#    volumes:
#      - ${CONFIG_PATH}/nats/nats-config.json:/srv/config.json
    ports:
      - "8502:80"
    depends_on:
      nats:
        condition: service_healthy
    networks:
      - sentinel-frontend-network
      - sentinel-backend-network

  qdrant:
    image: qdrant/qdrant:latest
    container_name: sentinel-qdrant
    ports:
      - "6333:6333" # Web UI
      - "6334:6334"
    volumes:
      - ./${DATA_PATH}/qdrant:/qdrant/storage
    restart: unless-stopped
    networks:
      - sentinel-backend-network
    healthcheck:
      test: ["CMD-SHELL", "bash -c \":> /dev/tcp/127.0.0.1/6333 || exit 1\""]
      interval: 5s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:16
    user: "0"
    container_name: sentinel-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ./${DATA_PATH}/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s # Increased start_period
    restart: unless-stopped
    networks:
      - sentinel-backend-network

  pgadmin:
    container_name: pgadmin #not adding this cause yugabyte health check not to start
    image: dpage/pgadmin4:9.4.0
    environment:
      PGADMIN_DEFAULT_EMAIL: 'pgadmin@pgadmin.com'
      PGADMIN_DEFAULT_PASSWORD: 'pgadmin'
    ports:
      - 16543:80
    volumes:
      - ./servers.json:/pgadmin4/servers.json
    networks:
      - sentinel-backend-network
      - sentinel-frontend-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:80/misc/ping" ]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes: {}
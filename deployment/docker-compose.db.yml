networks:
  frontend-network:
    external: true
    name: frontend-network
  backend-network:
    external: true
    name: backend-network

services:
  nats:
    image: nats:latest
    container_name: nats
    ports:
      - "4222:4222"
      - "8222:8222" # Monitoring port
    volumes:
      - nats-data:/data/nats
    command:
      - "--name=nats"
      - "--http_port=8222"
      - "--js"
      - "--sd=/data/nats"
    restart: unless-stopped
    networks:
      - backend-network

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334" # Web UI
    volumes:
      - qdrant-data:/qdrant/storage
    restart: unless-stopped
    networks:
      - backend-network

  postgres:
    image: postgres:17.5-alpine3.22
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/data/postgres
    ports:
      - 5332:5432
    restart: unless-stopped
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U pguser -d postgres" ]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  nats-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/nats
  qdrant-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/qdrant
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/postgres
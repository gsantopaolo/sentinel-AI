version: '3.8'

networks:
  frontend-network:
    external: true
    name: frontend-network
  backend-network:
    external: true
    name: backend-network

services:
  nats:
    image: nats:latest
    container_name: nats
    ports:
      - "4222:4222"
      - "8222:8222" # Monitoring port
      - "6222:6222"
    volumes:
      - nats-data:/data/nats
    command:
      - "--name=nats"
      - "--http_port=8222"
      - "--js"
      - "--sd=/data/nats"
    restart: unless-stopped
    networks:
      - backend-network

  nats-dashboard:
    image: mdawar/nats-dashboard
    container_name: nats-dashboard
    environment:
      # The NATS monitoring server will be proxied on /proxy/* on the frontend.
      # See: config/Caddyfile for the reverse proxy configuration.
      REVERSE_PROXY_UPSTREAM: 'nats:8222'
    volumes:
      # Optional config file.
      - ${CONFIG_PATH}/nats-config.json:/srv/config.json
    ports:
      - "8000:80"
    #      - target: 80
    #        published: 8000
    #        protocol: tcp
    networks:
      - backend-network
      - frontend-network


  qdrant:
    image: qdrant/qdrant:latest
    container_name: sentinel-qdrant
    ports:
      - "6333:6333"
      - "6334:6334" # Web UI
    volumes:
      - qdrant-data:/qdrant/storage
    environment:
      # HTTP & gRPC ports
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      # Storage path
      QDRANT__STORAGE__STORAGE_PATH: /qdrant/storage
      # API key (built-in readiness endpoint uses this)
      QDRANT__API__KEY: admin
      # Log level
      QDRANT__LOGGING__LOG_LEVEL: INFO
    #    healthcheck:
    #      test: [ "CMD-SHELL", "curl -s http://localhost:6333/healthz | grep -q 'healthz check passed%' || exit 1" ]
    #      interval: 20s
    #      timeout: 10s
    #      retries: 5
    #      start_period: 30s
    restart: unless-stopped
    networks:
      - backend-network

  postgres:
    image: postgres:17.5-alpine3.22
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U pguser -d postgres" ]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  nats-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/nats
  qdrant-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/qdrant
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/postgres
